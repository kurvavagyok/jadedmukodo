<!DOCTYPE html>
<html lang="hu">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>JADED - Deep Discovery AI Platform</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <style>
        /* --- Alap stílusok és változók --- */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');

        :root {
            --primary: #990c58;
            --secondary: #e51284;
            --accent: #0077ff;
            --bg: #05020a;
            --surface: rgba(10, 10, 10, 0.8);
            --glass: rgba(255, 255, 255, 0.03);
            --glass-strong: rgba(255, 255, 255, 0.07);
            --border: rgba(255, 255, 255, 0.1);
            --border-glow: rgba(229, 18, 132, 0.5);
            --text: #f0f0f0;
            --text-muted: #94a3b8;
            --radius: 12px;
            --shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
            --transition-curve: cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        /* iPhone fullscreen optimalizáció */
        html {
            height: 100%;
            height: -webkit-fill-available;
            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--bg);
            color: var(--text);
            min-height: 100vh;
            min-height: -webkit-fill-available;
            overflow-x: hidden;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        /* iPhone safe area támogatás */
        @supports (padding: max(0px)) {
            body {
                padding-left: max(0px, env(safe-area-inset-left));
                padding-right: max(0px, env(safe-area-inset-right));
            }
        }

        /* Egyedi, finom görgetősáv */
        ::-webkit-scrollbar { width: 4px; }
        ::-webkit-scrollbar-track { background: transparent; }
        ::-webkit-scrollbar-thumb {
            background: var(--glass-strong);
            border-radius: 10px;
            border: 1px solid var(--border);
        }

        /* Dinamikus, animált háttér - nagyon lassú, észrevehetetlenül mozgó */
        .aurora-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            pointer-events: none;
            z-index: -1;
            overflow: hidden;
        }
        .aurora-background .aurora {
            position: absolute;
            border-radius: 50%;
            mix-blend-mode: screen;
            filter: blur(80px);
            opacity: 0.2;
        }
        .aurora.one {
            width: 80vw; height: 80vw; top: -40vw; left: -40vw;
            background: var(--primary);
            animation: move-one 180s infinite ease-in-out;
        }
        .aurora.two {
            width: 70vw; height: 70vw; top: -30vw; right: -30vw;
            background: var(--secondary);
            animation: move-two 220s infinite ease-in-out reverse;
        }
        .aurora.three {
            width: 60vw; height: 60vw; bottom: -30vw; left: 10vw;
            background: var(--accent);
            animation: move-three 200s infinite ease-in-out;
        }
        @keyframes move-one { 
            0% { transform: translate(0, 0) rotate(0deg) scale(1); }
            25% { transform: translate(20vw, 15vh) rotate(90deg) scale(1.1); }
            50% { transform: translate(40vw, 30vh) rotate(180deg) scale(0.9); }
            75% { transform: translate(-10vw, 20vh) rotate(270deg) scale(1.05); }
            100% { transform: translate(0, 0) rotate(360deg) scale(1); }
        }
        @keyframes move-two { 
            0% { transform: translate(0, 0) rotate(0deg) scale(1); }
            30% { transform: translate(-20vw, -10vh) rotate(-120deg) scale(0.95); }
            60% { transform: translate(-30vw, 20vh) rotate(-180deg) scale(1.1); }
            90% { transform: translate(10vw, -15vh) rotate(-300deg) scale(0.9); }
            100% { transform: translate(0, 0) rotate(-360deg) scale(1); }
        }
        @keyframes move-three { 
            0% { transform: translate(0, 0) rotate(0deg) scale(1); }
            20% { transform: translate(15vw, -20vh) rotate(60deg) scale(1.05); }
            40% { transform: translate(20vw, -40vh) rotate(90deg) scale(0.95); }
            70% { transform: translate(-5vw, -25vh) rotate(210deg) scale(1.1); }
            100% { transform: translate(0, 0) rotate(360deg) scale(1); }
        }

        /* --- Fő elrendezés --- */
        .container { 
            display: flex; 
            min-height: 100vh; 
            min-height: -webkit-fill-available;
            position: relative; 
        }

        /* --- Oldalsáv (Sidebar) --- */
        .sidebar {
            width: 260px;
            background: var(--surface);
            backdrop-filter: blur(40px) saturate(180%);
            border-right: 1px solid var(--border);
            overflow-y: auto;
            position: fixed;
            height: 100vh;
            height: -webkit-fill-available;
            z-index: 1000;
            transform: translateX(-100%);
            transition: transform 0.4s var(--transition-curve);
            display: flex;
            flex-direction: column;
        }
        .sidebar.open { transform: translateX(0); }

        .sidebar-overlay {
            position: fixed;
            top: 0; left: 0;
            width: 100vw; height: 100vh;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(10px);
            z-index: 999;
            opacity: 0;
            visibility: hidden;
            transition: all 0.4s ease;
        }
        .sidebar-overlay.active { opacity: 1; visibility: visible; }

        .sidebar-header {
            padding: 16px 12px;
            border-bottom: 1px solid var(--border);
        }
        .logo { display: flex; align-items: center; gap: 8px; margin-bottom: 16px; }
        .logo-icon {
            width: 32px; height: 32px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 8px;
            display: flex; align-items: center; justify-content: center;
            font-size: 1.2rem; font-weight: 800; color: #fff;
            box-shadow: 0 4px 15px rgba(229, 18, 132, 0.3);
            transition: transform 0.3s var(--transition-curve);
        }
        .logo:hover .logo-icon { transform: rotate(-10deg) scale(1.1); }
        .logo-text h1 {
            font-size: 1.2rem; font-weight: 800;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
            line-height: 1.1;
        }
        .logo-text p { font-size: 0.7rem; color: var(--text-muted); margin-top: 2px; font-weight: 500; }

        .new-chat-btn {
            width: 100%;
            background: var(--glass-strong);
            border: 1px solid var(--border);
            color: var(--text);
            border-radius: 10px;
            padding: 10px 12px;
            font-weight: 600; font-size: 0.8rem;
            cursor: pointer;
            display: flex; align-items: center; justify-content: center; gap: 6px;
            transition: all 0.3s var(--transition-curve);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
        .new-chat-btn:hover, .new-chat-btn:active {
            transform: translateY(-2px);
            border-color: var(--border-glow);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4), 0 0 15px var(--border-glow);
        }

        .sidebar-content { padding: 12px; flex-grow: 1; overflow-y: auto; }
        .sidebar-footer { padding: 12px; border-top: 1px solid var(--border); }
        .made-by { font-size: 0.7rem; color: var(--text-muted); text-align: center; }

        .service-category { margin-bottom: 16px; }
        .category-header {
            background: var(--glass);
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 8px; cursor: pointer;
            display: flex; align-items: center; justify-content: space-between;
            margin-bottom: 6px;
            transition: all 0.3s var(--transition-curve);
            min-height: 40px;
        }
        .category-header .fa-chevron-down { transition: transform 0.3s var(--transition-curve); }
        .category-header:hover, .category-header:active {
            background: var(--glass-strong);
            border-color: var(--border-glow);
            transform: translateY(-2px);
        }
        .category-title { display: flex; align-items: center; gap: 8px; font-weight: 600; font-size: 0.8rem; }
        .category-title i { color: var(--accent); }
        .category-services {
            display: grid;
            grid-template-rows: 0fr;
            transition: grid-template-rows 0.4s ease-out;
        }
        .category-services > div { overflow: hidden; }
        .category-services.open { grid-template-rows: 1fr; }

        .service-item {
            background: transparent;
            border: 1px solid transparent;
            border-radius: 8px;
            padding: 8px; margin-bottom: 4px; cursor: pointer;
            transition: all 0.3s var(--transition-curve);
            display: flex; align-items: center; gap: 8px;
            margin-left: 8px; border-left: 2px solid var(--border);
            min-height: 44px;
        }
        .service-item:hover, .service-item:active {
            background: var(--glass-strong);
            border-color: transparent transparent transparent var(--primary);
            transform: translateX(4px);
            color: #fff;
        }
        .service-icon {
            width: 24px; height: 24px;
            background: linear-gradient(135deg, var(--glass-strong), var(--glass));
            border: 1px solid var(--border);
            border-radius: 6px;
            display: flex; align-items: center; justify-content: center;
            font-size: 0.8rem; color: var(--accent); flex-shrink: 0;
            transition: all 0.3s var(--transition-curve);
        }
        .service-item:hover .service-icon { transform: scale(1.1); color: var(--secondary); border-color: var(--secondary); }
        .service-info h4 { font-size: 0.75rem; font-weight: 600; margin-bottom: 2px; }
        .service-info p { font-size: 0.7rem; color: var(--text-muted); }

        /* --- Fő tartalom --- */
        .main-content {
            flex: 1; margin-left: 0;
            display: flex; flex-direction: column;
            transition: margin-left 0.4s var(--transition-curve);
            min-height: 100vh;
            min-height: -webkit-fill-available;
        }
        .header {
            padding: 8px 16px;
            background: rgba(10, 10, 10, 0.5);
            backdrop-filter: blur(30px) saturate(150%);
            border-bottom: 1px solid var(--border);
            display: flex; align-items: center; justify-content: space-between;
            position: sticky; top: 0; z-index: 100;
            height: 56px;
        }
        .menu-toggle {
            background: var(--glass-strong);
            border: 1px solid var(--border);
            border-radius: 8px; padding: 8px;
            color: var(--text); cursor: pointer;
            transition: all 0.3s var(--transition-curve);
            font-size: 0.9rem; width: 36px; height: 36px;
            display: flex; align-items: center; justify-content: center;
        }
        .menu-toggle:hover, .menu-toggle:active {
            background: var(--glass-strong);
            border-color: var(--border-glow);
            transform: scale(1.05);
        }
        .header-title {
            font-size: 1rem; font-weight: 700;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
            text-shadow: 0 0 20px rgba(229, 18, 132, 0.5);
        }

        /* --- Chat terület --- */
        .chat-area { flex: 1; display: flex; flex-direction: column; overflow: hidden; }
        .messages-container { 
            flex: 1; 
            overflow-y: auto; 
            padding: 16px; 
            scroll-behavior: smooth;
            overscroll-behavior: contain;
        }

        .welcome-screen {
            text-align: center; max-width: 500px;
            margin: 0 auto; padding: 30px 16px;
            display: flex; flex-direction: column; align-items: center; justify-content: center;
            height: 100%; animation: fadeIn 1s var(--transition-curve);
        }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
        .welcome-title {
            font-size: 2.5rem; font-weight: 800; margin-bottom: 1rem;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
            text-shadow: 0 0 30px rgba(229, 18, 132, 0.6);
        }
        .welcome-subtitle { font-size: 1rem; color: var(--text-muted); margin-bottom: 2rem; line-height: 1.6; }
        .start-btn {
            background: var(--glass-strong);
            border: 1px solid var(--border);
            border-radius: 10px;
            padding: 12px 24px; color: var(--text);
            font-weight: 600; font-size: 0.9rem; cursor: pointer;
            transition: all 0.3s var(--transition-curve);
            display: inline-flex; align-items: center; gap: 8px;
            min-height: 44px;
        }
        .start-btn:hover, .start-btn:active {
            background: var(--glass-strong);
            border-color: var(--border-glow);
            transform: translateY(-3px) scale(1.05);
        }

        .message { margin-bottom: 16px; animation: messageSlideIn 0.5s var(--transition-curve); }
        @keyframes messageSlideIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }

        .user-message { display: flex; justify-content: flex-end; }
        .user-bubble {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: #fff; padding: 10px 16px;
            border-radius: 16px 16px 4px 16px;
            max-width: 85%; font-weight: 500; font-size: 0.9rem; line-height: 1.5;
            box-shadow: 0 5px 20px rgba(229, 18, 132, 0.3);
        }
        .ai-message { display: flex; flex-direction: column; max-width: 95%; }
        .ai-content {
            background: var(--glass);
            border: 1px solid var(--border);
            border-radius: 16px 16px 16px 4px;
            padding: 12px 16px; line-height: 1.7; font-size: 0.9rem;
        }
        .ai-content pre {
            background: rgba(0,0,0,0.4); border: 1px solid var(--border);
            border-radius: 6px; padding: 12px; margin: 12px 0;
            font-size: 0.8rem; overflow-x: auto;
        }
        .ai-content code { font-family: 'SF Mono', 'Fira Code', 'Courier New', monospace; font-size: 0.8rem; }

        .message-actions { display: flex; gap: 6px; margin-top: 8px; margin-left: 8px; }
        .action-btn {
            background: var(--glass); border: 1px solid var(--border);
            border-radius: 6px; padding: 4px 8px; color: var(--text-muted);
            font-size: 0.7rem; cursor: pointer;
            transition: all 0.3s var(--transition-curve);
            display: flex; align-items: center; gap: 4px;
            min-height: 32px;
        }
        .action-btn:hover, .action-btn:active {
            background: var(--glass-strong); color: var(--text);
            border-color: var(--accent); transform: translateY(-2px);
        }

        /* --- Beviteli mező --- */
        .input-area {
            padding: 12px 16px;
            background: rgba(10, 10, 10, 0.5);
            backdrop-filter: blur(30px) saturate(150%);
            border-top: 1px solid var(--border);
            position: sticky; bottom: 0; z-index: 50;
        }

        /* iPhone safe area támogatás az alsó részen */
        @supports (padding: max(0px)) {
            .input-area {
                padding-bottom: max(12px, env(safe-area-inset-bottom));
            }
        }

        .input-wrapper { max-width: 1000px; margin: 0 auto; display: flex; gap: 8px; align-items: flex-end; }
        .message-input {
            flex: 1; background: var(--glass-strong);
            border: 1px solid var(--border); border-radius: 12px;
            padding: 8px 12px; color: var(--text); font-size: 0.9rem;
            resize: none; outline: none;
            transition: all 0.3s var(--transition-curve);
            min-height: 36px; max-height: 120px;
            font-family: inherit; line-height: 1.4;
        }
        .message-input:focus {
            border-color: var(--accent);
            box-shadow: 0 0 15px rgba(0, 119, 255, 0.4);
        }
        .send-btn {
            width: 36px; height: 36px;
            background: var(--accent); border: 1px solid var(--accent);
            border-radius: 50%; color: #fff; font-size: 1rem;
            cursor: pointer; transition: all 0.3s var(--transition-curve);
            display: flex; align-items: center; justify-content: center;
            box-shadow: 0 4px 15px rgba(0, 119, 255, 0.4);
            flex-shrink: 0;
        }
        .send-btn:hover, .send-btn:active { transform: scale(1.1); box-shadow: 0 8px 25px rgba(0, 119, 255, 0.6); }
        .send-btn:disabled {
            opacity: 0.5; cursor: not-allowed; transform: none;
            background: var(--glass-strong); border-color: var(--border);
            box-shadow: none;
        }

        /* --- Töltés és Visszajelzés --- */
        .typing-indicator { display: flex; gap: 6px; }
        .typing-dot {
            width: 6px; height: 6px;
            background: var(--primary); border-radius: 50%;
            animation: typing-bounce 1.4s infinite ease-in-out;
        }
        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }
        @keyframes typing-bounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1.0); }
        }

        /* Enhanced Deep Research Progress Indicator */
        .research-indicator {
            background: var(--glass);
            border: 1px solid var(--border);
            border-radius: 12px; padding: 20px;
            display: flex; flex-direction: column; gap: 16px;
            min-width: 320px;
        }

        .research-header {
            display: flex; align-items: center; gap: 12px;
            justify-content: center;
        }

        .research-indicator .spinner {
            width: 24px; height: 24px;
            border: 2px solid var(--border);
            border-top-color: var(--accent);
            border-radius: 50%;
            animation: spin 1.2s linear infinite;
        }
        @keyframes spin { to { transform: rotate(360deg); } }

        .research-indicator h4 { 
            font-weight: 600; color: var(--text); font-size: 0.9rem; 
            margin: 0; text-align: center;
        }

        .progress-section {
            display: flex; flex-direction: column; gap: 8px;
        }

        .progress-bar {
            width: 100%; height: 6px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px; overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            border-radius: 3px;
            transition: width 0.5s ease;
            min-width: 2px;
        }

        .progress-text {
            display: flex; justify-content: space-between;
            font-size: 0.75rem; color: var(--text-muted);
        }

        .phase-indicator {
            font-size: 0.8rem; color: var(--text);
            text-align: center; line-height: 1.4;
            background: rgba(0, 119, 255, 0.1);
            padding: 8px 12px; border-radius: 6px;
            border-left: 3px solid var(--accent);
        }

        .time-estimates {
            display: flex; justify-content: space-between;
            font-size: 0.7rem; color: var(--text-muted);
            padding: 8px 0; border-top: 1px solid var(--border);
        }

        .phases-completed {
            display: flex; gap: 6px; justify-content: center;
            margin-top: 8px;
        }

        .phase-dot {
            width: 8px; height: 8px; border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

        .phase-dot.completed {
            background: var(--accent);
            transform: scale(1.2);
        }

        .phase-dot.active {
            background: var(--secondary);
            transform: scale(1.4);
            box-shadow: 0 0 8px var(--secondary);
        }

        /* --- Modális ablak (Modal) --- */
        .modal {
            position: fixed; top: 0; left: 0;
            width: 100%; height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(15px);
            display: none; align-items: center; justify-content: center;
            z-index: 2000; opacity: 0;
            transition: opacity 0.3s ease; padding: 16px;
        }
        .modal.show { display: flex; opacity: 1; }
        .modal-content {
            background: var(--surface); border: 1px solid var(--border);
            border-radius: 16px; padding: 20px;
            max-width: 450px; width: 100%;
            max-height: 90vh; overflow-y: auto;
            backdrop-filter: blur(40px) saturate(180%);
            transform: scale(0.95) translateY(20px);
            transition: transform 0.4s var(--transition-curve);
        }
        .modal.show .modal-content { transform: scale(1) translateY(0); }
        .modal-header { display: flex; align-items: center; justify-content: space-between; margin-bottom: 20px; }
        .modal-title {
            font-size: 1.2rem; font-weight: 700;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
        }
        .close-btn {
            background: var(--glass-strong); border: 1px solid var(--border);
            border-radius: 50%; width: 32px; height: 32px;
            display: flex; align-items: center; justify-content: center;
            color: var(--text); cursor: pointer;
            transition: all 0.3s var(--transition-curve);
        }
        .close-btn:hover, .close-btn:active { transform: scale(1.1) rotate(90deg); }
        .modal-body { display: flex; flex-direction: column; gap: 12px; }
        .modal-body label { font-weight: 500; color: var(--text-muted); font-size: 0.8rem; }
        .modal-body input, .modal-body textarea {
            background: var(--glass-strong); border: 1px solid var(--border);
            border-radius: 8px; padding: 10px; color: var(--text);
            font-size: 0.9rem; outline: none;
            transition: all 0.3s var(--transition-curve);
            font-family: inherit; resize: vertical;
        }
        .modal-body input:focus, .modal-body textarea:focus { border-color: var(--accent); }
        .modal-footer { margin-top: 20px; display: flex; justify-content: flex-end; }
        .modal-submit-btn {
            background: var(--accent); color: #fff;
            border: none; border-radius: 8px;
            padding: 10px 20px; font-weight: 600; font-size: 0.8rem;
            cursor: pointer; transition: all 0.3s var(--transition-curve);
            min-height: 40px;
        }
        .modal-submit-btn:hover, .modal-submit-btn:active { transform: translateY(-2px); }

        /* --- Kutatási Eredmények és Dokumentumok --- */
        .research-complete, .research-error {
            background: var(--glass); border: 1px solid var(--border);
            border-radius: 12px; padding: 20px; margin: 12px 0;
            backdrop-filter: blur(10px);
        }
        .completion-stats h3, .error-text h3 {
            font-weight: 700; margin-bottom: 12px;
            color: var(--text); font-size: 1rem;
            display: flex; align-items: center; gap: 8px;
        }
        .completion-stats h3 { color: var(--secondary); }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); gap: 12px; margin-bottom: 20px; }
        .stat-item { text-align: center; background: rgba(0, 0, 0, 0.2); padding: 12px; border-radius: 8px; }
        .stat-number { display: block; font-size: 1.5rem; font-weight: 700; color: var(--accent); }
        .stat-label { font-size: 0.7rem; color: var(--text-muted); }

        .document-preview {
            background: linear-gradient(135deg, rgba(0, 119, 255, 0.1), rgba(0, 119, 255, 0.05));
            border: 1px solid var(--accent); border-radius: 10px;
            padding: 16px; cursor: pointer; transition: all 0.3s ease;
            display: flex; align-items: center; gap: 12px;
        }
        .document-preview:hover {
            background: linear-gradient(135deg, rgba(0, 119, 255, 0.2), rgba(0, 119, 255, 0.1));
            transform: translateY(-3px); box-shadow: 0 5px 15px rgba(0, 119, 255, 0.2);
        }
        .document-icon { font-size: 2rem; color: var(--accent); flex-shrink: 0; }
        .document-info h4 { margin: 0 0 4px 0; color: var(--text); font-weight: 600; font-size: 0.9rem; }
        .document-info p { margin: 0; color: var(--text-muted); font-size: 0.8rem; }
        .document-arrow { font-size: 1.2rem; color: var(--accent); margin-left: auto; flex-shrink: 0; transition: transform 0.3s ease; }
        .document-preview:hover .document-arrow { transform: translateX(5px); }

        .research-error { border-color: #ff3b30; }
        .error-text h3 { color: #ff453a; }
        .error-icon { font-size: 1rem; }

        .document-viewer {
            position: fixed; top: 0; left: 0;
            width: 100%; height: 100%;
            background: var(--bg); z-index: 10000;
            display: none; flex-direction: column;
            animation: slideInFromRight 0.5s var(--transition-curve);
        }
        @keyframes slideInFromRight { from { transform: translateX(100%); opacity: 0; } to { transform: translateX(0); opacity: 1; } }
        .document-viewer.show { display: flex; }
        .document-header {
            background: transparent;
            padding: 1rem; border-bottom: 1px solid var(--border);
            display: flex; align-items: center; justify-content: space-between;
            position: sticky; top: 0; z-index: 100;
            backdrop-filter: blur(20px);
        }
        .document-header h2 { 
            margin: 0; font-weight: 700; font-size: 1.1rem; 
            flex: 1; text-align: center;
        }
        .document-header-left { display: flex; align-items: center; gap: 0.5rem; width: 120px; }
        .document-header-right { 
            display: flex; align-items: center; gap: 0.5rem; width: 120px; 
            justify-content: flex-end;
        }
        .compact-btn {
            width: 32px; height: 32px;
            background: var(--glass-strong); border: 1px solid var(--border);
            border-radius: 6px; color: var(--text); cursor: pointer;
            display: flex; align-items: center; justify-content: center;
            transition: all 0.3s var(--transition-curve);
            font-size: 0.8rem;
        }
        .compact-btn:hover, .compact-btn:active {
            background: var(--glass-strong); border-color: var(--border-glow);
            transform: translateY(-2px);
        }
        .document-content { 
            flex: 1; overflow-y: auto; padding: 1.5rem; 
            max-width: 1000px; margin: 0 auto;
        }
        .document-section { 
            margin-bottom: 2rem; 
        }
        .document-section h3 {
            color: var(--secondary); 
            padding-bottom: 0.5rem; margin-bottom: 1rem; 
            font-weight: 600; font-size: 1rem;
            border-bottom: 1px solid var(--border);
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
        }
        .synthesis-content { 
            line-height: 1.6; background: var(--glass); padding: 1.5rem; 
            border-radius: 12px; border: 1px solid var(--border);
            backdrop-filter: blur(10px); text-align: left;
            box-shadow: var(--shadow);
        }
        .synthesis-content h1, .synthesis-content h2, .synthesis-content h3 {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
            font-weight: 600; margin-top: 1.5rem; margin-bottom: 0.8rem;
        }
        .synthesis-content p { margin-bottom: 1rem; color: var(--text); }
        .synthesis-content ul, .synthesis-content ol { 
            margin: 1rem 0; padding-left: 1.5rem; color: var(--text);
        }
        .synthesis-content li { margin-bottom: 0.5rem; }
        .synthesis-content strong { color: var(--accent); font-weight: 600; }
        .synthesis-content em { color: var(--secondary); }
        .synthesis-content blockquote {
            border-left: 3px solid var(--accent); padding-left: 1rem;
            margin: 1rem 0; font-style: italic; color: var(--text-muted);
        }
        .source-item {
            display: flex; gap: 1rem; padding: 1rem;
            background: var(--glass); border-radius: 8px;
            margin-bottom: 0.8rem; border: 1px solid var(--border);
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        .source-item:hover { 
            border-color: var(--accent); 
            transform: translateY(-1px); 
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        }
        .source-number { 
            color: var(--accent); font-weight: 600; flex-shrink: 0; 
            font-size: 0.9rem; width: 1.5rem; text-align: center;
            background: rgba(0, 119, 255, 0.1); border-radius: 50%;
            width: 24px; height: 24px; display: flex; align-items: center; justify-content: center;
        }
        .source-content h4 { 
            margin: 0 0 0.5rem 0; font-size: 0.9rem; font-weight: 600;
            line-height: 1.3; color: var(--text);
        }
        .source-content a { 
            color: var(--accent); text-decoration: none; font-size: 0.8rem; 
            word-break: break-all; line-height: 1.3;
        }
        .source-content a:hover { 
            text-decoration: underline; 
            color: var(--secondary);
        }
        .source-date { 
            display: block; color: var(--text-muted); font-size: 0.7rem; 
            margin-top: 0.5rem; font-weight: 400;
        }

        /* iOS-szerű animációk és interakciók */
        .ios-bounce {
            animation: iosBounce 0.3s ease-out;
        }

        @keyframes iosBounce {
            0% { transform: scale(1); }
            50% { transform: scale(0.95); }
            100% { transform: scale(1); }
        }

        /* Érintési visszajelzés */
        .touch-feedback {
            position: relative;
            overflow: hidden;
        }

        .touch-feedback::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.3s ease, height 0.3s ease;
            pointer-events: none;
        }

        .touch-feedback.active::before {
            width: 200px;
            height: 200px;
        }

        /* Swipe indikátor */
        .swipe-indicator {
            position: fixed;
            top: 50%;
            left: 10px;
            transform: translateY(-50%);
            width: 4px;
            height: 60px;
            background: var(--accent);
            border-radius: 2px;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 1000;
        }

        .swipe-indicator.show {
            opacity: 0.7;
        }

        /* Pull-to-refresh indikátor */
        .pull-refresh {
            position: fixed;
            top: -60px;
            left: 50%;
            transform: translateX(-50%);
            width: 40px;
            height: 40px;
            background: var(--glass);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: top 0.3s ease;
            z-index: 1000;
        }

        .pull-refresh.active {
            top: 20px;
        }

        .pull-refresh svg {
            width: 20px;
            height: 20px;
            color: var(--accent);
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        /* Gomb pressed állapot */
        .btn-pressed {
            transform: scale(0.95) !important;
            opacity: 0.8 !important;
        }

        /* Mobil nézet optimalizációk */
        @media (max-width: 768px) {
            .sidebar { width: 240px; }
            .header-title { font-size: 0.9rem; }
            .messages-container, .input-area { padding: 12px; }
            .document-header { 
                padding: 0.8rem; flex-direction: row; 
                justify-content: space-between; align-items: center;
            }
            .document-header h2 { 
                font-size: 0.9rem; text-align: center; flex: 1;
                margin: 0;
            }
            .document-header-left, .document-header-right { width: auto; }
            .compact-btn { width: 28px; height: 28px; font-size: 0.7rem; }
            .document-content { padding: 1rem; }
            .synthesis-content { padding: 1rem; }
            .source-item { padding: 0.8rem; gap: 0.8rem; }
            .welcome-title { font-size: 2rem; }
            .welcome-subtitle { font-size: 0.9rem; }
        }

        /* Nagyon kicsi mobil eszközökre */
        @media (max-width: 480px) {
            .sidebar { width: 220px; }
            .header { padding: 6px 12px; height: 48px; }
            .header-title { font-size: 0.8rem; }
            .menu-toggle { width: 32px; height: 32px; font-size: 0.8rem; }
            .send-btn { width: 32px; height: 32px; }
            .message-input { font-size: 0.8rem; min-height: 32px; }
            .input-area { padding: 8px 12px; }
            .welcome-title { font-size: 1.8rem; }
            .welcome-subtitle { font-size: 0.8rem; }
            .user-bubble { font-size: 0.8rem; }
            .ai-content { font-size: 0.8rem; }
        }
    </style>
</head>
<body>
    <!-- Swipe indikátor -->
    <div class="swipe-indicator" id="swipeIndicator"></div>

    <!-- Pull-to-refresh indikátor -->
    <div class="pull-refresh" id="pullRefresh">
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M23 4v6h-6M1 20v-6h6"/>
            <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
        </svg>
    </div>

    <div class="aurora-background">
        <div class="aurora one"></div>
        <div class="aurora two"></div>
        <div class="aurora three"></div>
    </div>
    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <div class="container">
        <!-- Oldalsáv (Sidebar) -->
        <aside class="sidebar" id="sidebar" role="navigation">
            <div class="sidebar-header">
                <div class="logo">
                    <div class="logo-icon">J</div>
                    <div class="logo-text">
                        <h1>JADED</h1>
                        <p>Deep Discovery AI</p>
                    </div>
                </div>
                <button class="new-chat-btn touch-feedback" onclick="newChat()">
                    <i class="fas fa-plus"></i>
                    Új beszélgetés
                </button>
            </div>
            <div class="sidebar-content" id="sidebarContent">
                <!-- A szolgáltatások dinamikusan töltődnek be ide -->
            </div>
            <div class="sidebar-footer">
                <p class="made-by">JADE v2.5 by Sándor Kollár</p>
            </div>
        </aside>

        <!-- Fő tartalom -->
        <main class="main-content" id="mainContent">
            <header class="header">
                <button class="menu-toggle touch-feedback" onclick="toggleSidebar()" aria-label="Menü megnyitása/bezárása">
                    <i class="fas fa-bars"></i>
                </button>
                <h1 class="header-title">JADE AI Platform</h1>
                <div></div> <!-- Spacer -->
            </header>

            <div class="chat-area">
                <div class="messages-container" id="messagesContainer" aria-live="polite">
                    <div class="welcome-screen" id="welcomeScreen">
                        <h1 class="welcome-title">JADED</h1>
                        <p class="welcome-subtitle">
                            Deep Discovery AI Platform - 150+ Alpha szolgáltatás, neurális keresés és fejlett AI elemzés
                        </p>
                        <button class="start-btn touch-feedback" onclick="hideWelcome()">
                            <i class="fas fa-rocket"></i>
                            Kezdjük el!
                        </button>
                    </div>
                </div>

                <div class="input-area">
                    <div class="input-wrapper">
                        <textarea 
                            class="message-input" 
                            id="messageInput" 
                            placeholder="Kérdezz bármit..."
                            rows="1"
                            aria-label="Üzenet beviteli mező"
                        ></textarea>
                        <button class="send-btn touch-feedback" id="sendBtn" onclick="sendMessage()" aria-label="Üzenet küldése">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Szolgáltatás Modális Ablak -->
    <div class="modal" id="serviceModal" role="dialog" aria-modal="true" aria-labelledby="modalTitle">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Szolgáltatás</h2>
                <button class="close-btn touch-feedback" onclick="closeModal()" aria-label="Bezárás">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body" id="modalBody"></div>
            <div class="modal-footer" id="modalFooter"></div>
        </div>
    </div>

    <!-- Dokumentum Megjelenítő -->
    <div class="document-viewer" id="documentViewer" role="document" aria-hidden="true">
        <div class="document-header">
            <div class="document-header-left"></div>
            <h2 id="documentTitle">Kutatási Dokumentum</h2>
            <div class="document-header-right">
                <button class="compact-btn touch-feedback" onclick="downloadReport()" title="Letöltés">
                    <i class="fas fa-download"></i>
                </button>
                <button class="compact-btn touch-feedback" onclick="shareReport()" title="Megosztás">
                    <i class="fas fa-share-alt"></i>
                </button>
                <button class="compact-btn touch-feedback" onclick="closeDocumentViewer()" title="Bezárás">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <div class="document-content" id="documentContent"></div>
    </div>

    <script>
        // --- Globális Állapot és Konfiguráció ---
        const AppState = {
            isTyping: false,
            userId: 'user_' + Math.random().toString(36).substr(2, 9),
            researchState: null
        };
        const API_BASE_URL = '/api';

        // --- DOM Elemek Gyors Elérése ---
        const getEl = (id) => document.getElementById(id);

        // iOS-szerű haptikus visszajelzés
        class HapticFeedback {
            static light() {
                if ('vibrate' in navigator) {
                    navigator.vibrate(10);
                }
            }

            static medium() {
                if ('vibrate' in navigator) {
                    navigator.vibrate(20);
                }
            }

            static heavy() {
                if ('vibrate' in navigator) {
                    navigator.vibrate([30, 10, 30]);
                }
            }

            static success() {
                if ('vibrate' in navigator) {
                    navigator.vibrate([10, 50, 10]);
                }
            }

            static error() {
                if ('vibrate' in navigator) {
                    navigator.vibrate([100, 50, 100, 50, 100]);
                }
            }
        }

        // Érintési gesztusok kezelése
        class TouchGestureHandler {
            constructor() {
                this.touchStartX = 0;
                this.touchStartY = 0;
                this.touchEndX = 0;
                this.touchEndY = 0;
                this.minSwipeDistance = 50;
                this.setupGestures();
            }

            setupGestures() {
                document.addEventListener('touchstart', (e) => {
                    this.touchStartX = e.changedTouches[0].screenX;
                    this.touchStartY = e.changedTouches[0].screenY;
                });

                document.addEventListener('touchend', (e) => {
                    this.touchEndX = e.changedTouches[0].screenX;
                    this.touchEndY = e.changedTouches[0].screenY;
                    this.handleSwipe();
                });

                // Pull-to-refresh gesztus
                let pullStartY = 0;
                let pullCurrentY = 0;
                let isPulling = false;

                document.addEventListener('touchstart', (e) => {
                    if (window.scrollY === 0) {
                        pullStartY = e.touches[0].clientY;
                        isPulling = true;
                    }
                });

                document.addEventListener('touchmove', (e) => {
                    if (isPulling && window.scrollY === 0) {
                        pullCurrentY = e.touches[0].clientY - pullStartY;
                        if (pullCurrentY > 100) {
                            HapticFeedback.light();
                            this.refreshMessages();
                        }
                    }
                });

                document.addEventListener('touchend', () => {
                    isPulling = false;
                    pullCurrentY = 0;
                });
            }

            handleSwipe() {
                const diffX = this.touchEndX - this.touchStartX;
                const diffY = this.touchEndY - this.touchStartY;

                if (Math.abs(diffX) > Math.abs(diffY)) {
                    if (Math.abs(diffX) > this.minSwipeDistance) {
                        if (diffX > 0) {
                            this.openSidebar();
                        } else {
                            this.closeSidebar();
                        }
                    }
                }
            }

            openSidebar() {
                HapticFeedback.light();
                openSidebar();
            }

            closeSidebar() {
                HapticFeedback.light();
                closeSidebar();
            }

            refreshMessages() {
                HapticFeedback.medium();
                location.reload();
            }
        }

        // DOM elemek
        const sidebar = getEl('sidebar'), sidebarOverlay = getEl('sidebarOverlay'),
              sidebarContent = getEl('sidebarContent'), mainContent = getEl('mainContent'),
              messagesContainer = getEl('messagesContainer'), messageInput = getEl('messageInput'),
              sendBtn = getEl('sendBtn'), serviceModal = getEl('serviceModal'),
              modalTitle = getEl('modalTitle'), modalBody = getEl('modalBody'),
              modalFooter = getEl('modalFooter'), documentViewer = getEl('documentViewer'),
              documentContent = getEl('documentContent'), documentTitle = getEl('documentTitle');
        let welcomeScreen = getEl('welcomeScreen');

        // Gesztuskezelő inicializálása
        let gestureHandler;

        // --- Alkalmazás Inicializálása ---
        document.addEventListener('DOMContentLoaded', () => {
            setupEventListeners();
            loadServices();
            messageInput.focus();
            gestureHandler = new TouchGestureHandler();

            // Haptikus feedback minden érintésre
            document.addEventListener('touchstart', (e) => {
                if (e.target.classList.contains('touch-feedback')) {
                    HapticFeedback.light();
                    e.target.classList.add('btn-pressed');
                }
            });

            document.addEventListener('touchend', (e) => {
                if (e.target.classList.contains('touch-feedback')) {
                    e.target.classList.remove('btn-pressed');
                }
            });
        });

        function setupEventListeners() {
            messageInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if (!sendBtn.disabled) sendMessage();
                }
            });
            messageInput.addEventListener('input', () => {
                messageInput.style.height = 'auto';
                messageInput.style.height = `${Math.min(messageInput.scrollHeight, 120)}px`;
            });
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    if (serviceModal.classList.contains('show')) closeModal();
                    else if (sidebar.classList.contains('open')) closeSidebar();
                    else if (documentViewer.classList.contains('show')) closeDocumentViewer();
                }
            });
            sidebarOverlay.addEventListener('click', closeSidebar);
            serviceModal.addEventListener('click', (e) => {
                if (e.target === serviceModal) closeModal();
            });
        }

        // --- API Kommunikáció ---

async function fetchAPI(endpoint, options = {}) {
            try {
                // Ha az endpoint már /api-val kezdődik, ne duplázzuk
                const url = endpoint.startsWith('/api') ? endpoint : `/api${endpoint}`;
                const response = await fetch(url, options);
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`HTTP ${response.status}: ${errorText}`);
                }
                return await response.json();
            } catch (error) {
                console.error('API Error:', error);
                // Csak akkor hívjuk meg a displayResearchError-t, ha létezik
                if (typeof displayResearchError === 'function') {
                    displayResearchError(error.message);
                }
                throw error;
            }
        }

        // --- UI Kezelő Függvények ---
        function openSidebar() { 
            sidebar.classList.add('open'); 
            sidebarOverlay.classList.add('active'); 
        }

        function closeSidebar() { 
            sidebar.classList.remove('open'); 
            sidebarOverlay.classList.remove('active'); 
        }

        function toggleSidebar() { 
            sidebar.classList.contains('open') ? closeSidebar() : openSidebar(); 
        }

        function openModal() {
            serviceModal.style.display = 'flex';
            setTimeout(() => serviceModal.classList.add('show'), 10);
        }

        function closeModal() {
            serviceModal.classList.remove('show');
            setTimeout(() => { serviceModal.style.display = 'none'; }, 300);
        }

        function openDocumentViewer() {
            documentViewer.classList.add('show');
            documentViewer.setAttribute('aria-hidden', 'false');
        }

        function closeDocumentViewer() {
            documentViewer.classList.remove('show');
            documentViewer.setAttribute('aria-hidden', 'true');
            document.body.style.overflow = 'auto';
        }

        function hideWelcome() {
            if (welcomeScreen) {
                welcomeScreen.style.display = 'none';
                welcomeScreen = null;
            }
        }

        function newChat() {
            messagesContainer.innerHTML = '';
            const newWelcomeScreen = document.createElement('div');
            newWelcomeScreen.className = 'welcome-screen';
            newWelcomeScreen.id = 'welcomeScreen';
            newWelcomeScreen.innerHTML = `
                <h1 class="welcome-title">JADED</h1>
                <p class="welcome-subtitle">Készen állok a következő feladatra. Válassz egy szolgáltatást, vagy kérdezz bármit!</p>
            `;
            messagesContainer.appendChild(newWelcomeScreen);
            welcomeScreen = getEl('welcomeScreen');
            messageInput.value = '';
            messageInput.focus();
            closeSidebar();
        }

        // --- Szolgáltatások Betöltése ---
        async function loadServices() {
            try {
                const { categories } = await fetchAPI('/services');
                sidebarContent.innerHTML = '';

                const categoryMeta = {
                    biologiai_orvosi: { name: 'Biológiai & Orvosi', icon: 'fa-dna' },
                    kemiai_anyagtudomanyi: { name: 'Kémiai & Anyagtudományi', icon: 'fa-atom' },
                    kornyezeti_fenntarthato: { name: 'Környezeti & Fenntartható', icon: 'fa-leaf' },
                    fizikai_asztrofizikai: { name: 'Fizikai & Asztrofizikai', icon: 'fa-satellite-dish' },
                    technologiai_melymu: { name: 'Technológiai & Mélyműszaki', icon: 'fa-microchip' },
                    tarsadalmi_gazdasagi: { name: 'Társadalmi & Gazdasági', icon: 'fa-chart-line' }
                };

                for (const categoryId in categories) {
                    const category = categories[categoryId];
                    const meta = categoryMeta[categoryId] || { name: categoryId, icon: 'fa-star' };

                    const categoryDiv = document.createElement('div');
                    categoryDiv.className = 'service-category';

                    let servicesHTML = '';
                    for (const serviceName in category) {
                        servicesHTML += `
                            <div class="service-item touch-feedback" onclick="selectService('${serviceName}', '${escapeHtml(category[serviceName])}')">
                                <div class="service-icon"><i class="fas fa-flask"></i></div>
                                <div class="service-info">
                                    <h4>${escapeHtml(serviceName)}</h4>
                                    <p>${escapeHtml(category[serviceName])}</p>
                                </div>
                            </div>`;
                    }

                    categoryDiv.innerHTML = `
                        <div class="category-header touch-feedback" onclick="toggleCategory(this)">
                            <div class="category-title">
                                <i class="fas ${meta.icon}"></i>
                                <span>${meta.name}</span>
                            </div>
                            <i class="fas fa-chevron-down"></i>
                        </div>
                        <div class="category-services"><div>${servicesHTML}</div></div>`;
                    sidebarContent.appendChild(categoryDiv);
                }

                // Speciális funkciók
                const researchCategory = document.createElement('div');
                researchCategory.className = 'service-category';
                researchCategory.innerHTML = `
                    <div class="category-header touch-feedback" onclick="toggleCategory(this)">
                        <div class="category-title"><i class="fas fa-search-plus" style="color: var(--secondary)"></i><span>Kutatási Funkciók</span></div>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                    <div class="category-services"><div>
                        <div class="service-item touch-feedback" onclick="startDeepResearch()">
                            <div class="service-icon" style="color: var(--secondary);"><i class="fas fa-microscope"></i></div>
                            <div class="service-info"><h4>Deep Research</h4><p>Mélyreható kutatási elemzés</p></div>
                        </div>
                        <div class="service-item touch-feedback" onclick="openCodeGenerator()">
                            <div class="service-icon" style="color: var(--secondary);"><i class="fas fa-code"></i></div>
                            <div class="service-info"><h4>Kód Generátor</h4><p>AI-alapú kódolás</p></div>
                        </div>
                    </div></div>`;
                sidebarContent.appendChild(researchCategory);
            } catch (error) {
                sidebarContent.innerHTML = '<p style="padding: 1rem; color: var(--text-muted);">Szolgáltatások betöltése sikertelen.</p>';
            }
        }

        function toggleCategory(headerElement) {
            const services = headerElement.nextElementSibling;
            const chevron = headerElement.querySelector('.fa-chevron-down');
            const isOpen = services.classList.toggle('open');
            chevron.style.transform = isOpen ? 'rotate(180deg)' : 'rotate(0deg)';
        }

        // --- Üzenetküldés ---
        async function sendMessage() {
            const message = messageInput.value.trim();
            if (!message || AppState.isTyping) return;

            hideWelcome();
            addUserMessage(message);
            messageInput.value = '';
            messageInput.style.height = 'auto';
            showTypingIndicator();

            try {
                const data = await fetchAPI('/deep_discovery/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: message, user_id: AppState.userId })
                });
                hideTypingIndicator();
                addAiMessage(data.response, data.model_used);
                HapticFeedback.success();
            } catch (error) {
                hideTypingIndicator();
                HapticFeedback.error();
            }
        }

        function addUserMessage(message) {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message user-message';
            const bubble = document.createElement('div');
            bubble.className = 'user-bubble';
            bubble.textContent = message;
            messageDiv.appendChild(bubble);
            messagesContainer.appendChild(messageDiv);
            scrollToBottom();
        }

        function addAiMessage(content, model = '') {
            const messageId = 'msg_' + Date.now();
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message ai-message';

            messageDiv.innerHTML = `
                <div class="ai-content" id="${messageId}"></div>
                <div class="message-actions">
                    <button onclick="testProteinLookup()" class="action-button">
                        🧬 Protein Lookup Teszt
                    </button>

                    <!-- Új Ultimate funkciók -->
                    <button onclick="testMultimodalAI()" class="action-button">
                        🎨 Multimodális AI Teszt
                    </button>

                    <button onclick="testWebScraping()" class="action-button">
                        🕷️ Web Scraping Teszt
                    </button>

                    <button onclick="testQuantumSimulation()" class="action-button">
                        ⚛️ Kvantum Szimuláció
                    </button>

                    <button onclick="showUltimateStats()" class="action-button">
                        📊 Ultimate Statisztikák
                    </button>
                    <button class="action-btn touch-feedback" onclick="copyMessage(event, '${messageId}')"><i class="fas fa-copy"></i> Másolás</button>
                </div>`;
            messagesContainer.appendChild(messageDiv);

            const contentElement = getEl(messageId);
            contentElement.innerHTML = marked.parse(content);
            contentElement.querySelectorAll('pre code').forEach(hljs.highlightElement);
            scrollToBottom();
        }

        function showTypingIndicator() {
            AppState.isTyping = true;
            sendBtn.disabled = true;
            const indicator = document.createElement('div');
            indicator.id = 'typingIndicator';
            indicator.className = 'message ai-message';
            indicator.innerHTML = `
                <div class="ai-content" style="padding: 16px 18px; width: min-content;">
                    <div class="typing-indicator"><div class="typing-dot"></div><div class="typing-dot"></div><div class="typing-dot"></div></div>
                </div>`;
            messagesContainer.appendChild(indicator);
            scrollToBottom();
        }

        function hideTypingIndicator() {
            AppState.isTyping = false;
            sendBtn.disabled = false;
            getEl('typingIndicator')?.remove();
        }

        function scrollToBottom() {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // --- Egyéb funkciók ---
        function selectService(serviceName, description) {
            modalTitle.innerText = serviceName;
            modalBody.innerHTML = `
                <p style="color: var(--text-muted); line-height: 1.6;">${description}</p>
                <label for="serviceQuery">Kérdés vagy feladat:</label>
                <textarea id="serviceQuery" rows="4" placeholder="Adja meg a ${serviceName} szolgáltatáshoz kapcsolódó kérését..."></textarea>`;
            modalFooter.innerHTML = `<button class="modal-submit-btn touch-feedback" onclick="submitSimpleService('${serviceName}')">Elemzés indítása</button>`;
            openModal();
        }

        async function submitSimpleService(serviceName) {
            const query = getEl('serviceQuery').value;
            if (!query) return;

            closeModal();
            hideWelcome();
            addUserMessage(`Kérés a(z) ${serviceName} szolgáltatáshoz: ${query}`);
            showTypingIndicator();

            try {
                const data = await fetchAPI(`/alpha/simple/${serviceName}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query, details: "" })
                });
                hideTypingIndicator();
                addAiMessage(data.analysis, data.model_used);
                HapticFeedback.success();
            } catch (error) {
                hideTypingIndicator();
                HapticFeedback.error();
            }
        }

        function startDeepResearch() {
            modalTitle.innerText = 'Deep Research';
            modalBody.innerHTML = `
                <label for="researchQuery">Kutatási téma:</label>
                <input type="text" id="researchQuery" placeholder="Pl. \'A grafén felhasználása az akkumulátor technológiában\'">`;
            modalFooter.innerHTML = `<button class="modal-submit-btn touch-feedback" onclick="submitDeepResearchQuery()">Kutatás indítása</button>`;
            openModal();
        }

        async function submitDeepResearchQuery() {
            const query = getEl('researchQuery').value;
            if (!query) return;

            closeModal();
            hideWelcome();
            addUserMessage(`Deep Research indítva: ${query}`);
            showResearchIndicator(query);

            try {
                const data = await fetchAPI('/deep_discovery/deep_research', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query, user_id: AppState.userId })
                });

                AppState.researchState = {
                    query: data.query,
                    documentContent: data.final_synthesis,
                    sources: data.sources || [],
                    totalSources: data.total_sources_found || 0
                };

                getEl('researchIndicator')?.remove();
                displayResearchCompletion();
                HapticFeedback.success();
            } catch (error) {
                getEl('researchIndicator')?.remove();
                HapticFeedback.error();
            }
        }

        function showResearchIndicator(query) {
            const indicatorDiv = document.createElement('div');
            indicatorDiv.className = 'message ai-message';
            indicatorDiv.id = 'researchIndicator';
            indicatorDiv.innerHTML = `
                <div class="research-indicator">
                    <div class="research-header">
                        <div class="spinner"></div>
                        <h4>Háromszoros AI Keresési Rendszer</h4>
                    </div>

                    <div class="progress-section">
                        <div class="progress-bar">
                            <div class="progress-fill" id="progressFill" style="width: 0%"></div>
                        </div>
                        <div class="progress-text">
                            <span id="progressPercent">0%</span>
                            <span id="progressPhase">Inicializálás...</span>
                        </div>
                    </div>

                    <div class="phase-indicator" id="phaseStatus">
                        🔄 Keresési rendszer indítása...<br>
                        Téma: <strong>"${escapeHtml(query)}"</strong>
                    </div>

                    <div class="phases-completed">
                        <div class="phase-dot" id="phase1"></div>
                        <div class="phase-dot" id="phase2"></div>
                        <div class="phase-dot" id="phase3"></div>
                        <div class="phase-dot" id="phase4"></div>
                    </div>

                    <div class="time-estimates">
                        <span>Eltelt: <span id="elapsedTime">0:00</span></span>
                        <span>Becsült hátralevő: <span id="estimatedTime">2-3 perc</span></span>
                    </div>
                </div>`;
            messagesContainer.appendChild(indicatorDiv);
            scrollToBottom();

            // Progress update simulation
            startProgressSimulation(query);
        }

        function startProgressSimulation(query) {
            let progress = 0;
            let phase = 1;
            let elapsed = 0;

            const phases = [
                { name: "🔍 Exa Neural Search", duration: 45, progress: 25 },
                { name: "🧠 Gemini 2.5 Pro Analysis", duration: 45, progress: 50 },
                { name: "🤖 OpenAI GPT-4 Research", duration: 45, progress: 75 },
                { name: "📝 Final Synthesis", duration: 60, progress: 100 }
            ];

            const interval = setInterval(() => {
                elapsed++;

                // Calculate expected progress based on time
                let expectedProgress = 0;
                let currentPhase = 1;
                let phaseProgress = 0;

                if (elapsed <= 45) {
                    // Phase 1: Exa Search
                    expectedProgress = (elapsed / 45) * 25;
                    currentPhase = 1;
                    phaseProgress = (elapsed / 45) * 100;
                } else if (elapsed <= 90) {
                    // Phase 2: Gemini Analysis  
                    expectedProgress = 25 + ((elapsed - 45) / 45) * 25;
                    currentPhase = 2;
                    phaseProgress = ((elapsed - 45) / 45) * 100;
                } else if (elapsed <= 135) {
                    // Phase 3: OpenAI Research
                    expectedProgress = 50 + ((elapsed - 90) / 45) * 25;
                    currentPhase = 3;
                    phaseProgress = ((elapsed - 90) / 45) * 100;
                } else {
                    // Phase 4: Final Synthesis
                    expectedProgress = 75 + ((elapsed - 135) / 60) * 25;
                    currentPhase = 4;
                    phaseProgress = ((elapsed - 135) / 60) * 100;
                }

                expectedProgress = Math.min(expectedProgress, 98); // Cap at 98% until real completion

                // Update UI elements
                const progressFill = getEl('progressFill');
                const progressPercent = getEl('progressPercent');
                const progressPhase = getEl('progressPhase');
                const phaseStatus = getEl('phaseStatus');
                const elapsedTime = getEl('elapsedTime');
                const estimatedTime = getEl('estimatedTime');

                if (progressFill) progressFill.style.width = `${expectedProgress}%`;
                if (progressPercent) progressPercent.textContent = `${Math.round(expectedProgress)}%`;
                if (progressPhase) progressPhase.textContent = phases[currentPhase - 1]?.name || "Folyamatban...";

                if (phaseStatus) {
                    const currentPhaseName = phases[currentPhase - 1]?.name || "Feldolgozás";
                    phaseStatus.innerHTML = `${currentPhaseName}<br>Téma: <strong>"${escapeHtml(query)}"</strong><br><small>${Math.round(phaseProgress)}% kész</small>`;
                }

                if (elapsedTime) {
                    elapsedTime.textContent = `${Math.floor(elapsed/60)}:${(elapsed%60).toString().padStart(2, '0')}`;
                }

                if (estimatedTime) {
                    const remaining = Math.max(180 - elapsed, 30);
                    estimatedTime.textContent = `${Math.floor(remaining/60)}:${(remaining%60).toString().padStart(2, '0')}`;
                }

                // Update phase dots
                for (let i = 1; i <= 4; i++) {
                    const dot = getEl(`phase${i}`);
                    if (dot) {
                        if (i < currentPhase) {
                            dot.className = 'phase-dot completed';
                        } else if (i === currentPhase) {
                            dot.className = 'phase-dot active';
                        } else {
                            dot.className = 'phase-dot';
                        }
                    }
                }

                // Stop simulation after 4 minutes or when research completes
                if (elapsed > 240 || !getEl('researchIndicator')) {
                    clearInterval(interval);
                }

            }, 1000); // Update every second
        }

        function displayResearchCompletion() {
            const { researchState } = AppState;
            const sourcesCount = researchState.sources ? researchState.sources.length : 0;
            const contentLength = researchState.documentContent ? researchState.documentContent.length : 0;

            const messageDiv = document.createElement('div');
            messageDiv.className = 'message ai-message';
            messageDiv.innerHTML = `
                <div class="research-complete">
                    <div class="completion-stats">
                        <h3><i class="fas fa-check-circle"></i> Deep Research befejezve!</h3>
                        <div class="stats-grid">
                            <div class="stat-item">
                                <span class="stat-number">${researchState.totalSources || sourcesCount}</span>
                                <span class="stat-label">Forrás</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-number">${Math.round(contentLength/1000)}k</span>
                                <span class="stat-label">Karakter</span>
                            </div>
                        </div>
                    </div>
                    <div class="document-preview" onclick="showDocumentViewer()">
                        <div class="document-icon"><i class="fas fa-file-alt"></i></div>
                        <div class="document-info">
                            <h4>Részletes jelentés megtekintése</h4>
                            <p>Kutatási téma: ${researchState.query}</p>
                        </div>
                        <div class="document-arrow"><i class="fas fa-arrow-right"></i></div>
                    </div>
                </div>
                <div class="message-actions">
                    <button class="action-btn touch-feedback" onclick="copyMessage(event, 'research-result')"><i class="fas fa-copy"></i> Másolás</button>
                </div>`;
            messagesContainer.appendChild(messageDiv);
            scrollToBottom();
        }

        function displayResearchError(errorMessage) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'message ai-message';
            errorDiv.innerHTML = `
                <div class="research-error">
                    <div class="error-text">
                        <h3><i class="fas fa-exclamation-triangle error-icon"></i> Hiba történt</h3>
                        <p>${escapeHtml(errorMessage)}</p>
                    </div>
                </div>`;
            messagesContainer.appendChild(errorDiv);
            scrollToBottom();
        }

        function showDocumentViewer() {
            const { researchState } = AppState;
            if (!researchState || !researchState.documentContent) {
                console.log('No research data:', researchState);
                HapticFeedback.error();
                addAiMessage('⚠️ Nincs megjeleníthető kutatási jelentés.', 'JADED AI');
                return;
            }

            documentTitle.textContent = `Kutatási jelentés: ${researchState.query}`;

            const sourcesArray = Array.isArray(researchState.sources) ? researchState.sources : [];

            documentContent.innerHTML = `
                <div class="document-section">
                    <h3>Kutatási Jelentés</h3>
                    <div class="synthesis-content">${marked.parse(researchState.documentContent)}</div>
                </div>
                <div class="document-section">
                    <h3>Felhasznált Források (${sourcesArray.length})</h3>
                    <div class="sources-list">
                        ${sourcesArray.length > 0 ? sourcesArray.map((source, index) => `
                            <div class="source-item">
                                <div class="source-number">${index + 1}.</div>
                                <div class="source-content">
                                    <h4>${source.title || 'Névtelen forrás'}</h4>
                                    <a href="${source.url}" target="_blank">${source.url}</a>
                                    <span class="source-date">${source.published_date || 'Dátum ismeretlen'}</span>
                                </div>
                            </div>
                        `).join('') : '<p>Nincsenek elérhető források.</p>'}
                    </div>
                </div>
            `;

            openDocumentViewer();
            HapticFeedback.success();
        }

        function openCodeGenerator() {
            modalTitle.innerText = 'Kód Generátor';
            modalBody.innerHTML = `
                <label for="codePrompt">Leírás:</label>
                <textarea id="codePrompt" rows="4" placeholder="Írja le, milyen kódot szeretne generálni..."></textarea>
                <label for="codeLang">Nyelv:</label>
                <input type="text" id="codeLang" value="python">`;
            modalFooter.innerHTML = `<button class="modal-submit-btn touch-feedback" onclick="submitCodeGeneration()">Kód generálása</button>`;
            openModal();
        }

        async function submitCodeGeneration() {
            const prompt = getEl('codePrompt').value;
            const language = getEl('codeLang').value;
            if (!prompt) return;

            closeModal();
            hideWelcome();
            addUserMessage(`Kód generálási kérés (${language}): ${prompt}`);
            showTypingIndicator();

            try {
                const data = await fetchAPI('/code/generate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ prompt, language })
                });
                hideTypingIndicator();
                const codeMessage = `\`\`\`${language}\n${data.generated_code}\n\`\`\``;
                addAiMessage(codeMessage, data.model_used);
                HapticFeedback.success();
            } catch (error) {
                hideTypingIndicator();
                HapticFeedback.error();
            }
        }
        async function testProteinLookup() {
            showLoading('Fehérje szerkezet lekérdezés...');
            try {
                const response = await fetch('/api/deep_discovery/protein_structure', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        protein_id: 'P53_HUMAN'
                    })
                });
                const data = await response.json();
                displayResults('Fehérje Lookup Eredmény', data, true);
            } catch (error) {
                displayError('Protein lookup hiba: ' + error.message);
            }
        }

        async function testMultimodalAI() {
            showLoading('Multimodális AI teszt futtatása...');
            try {
                const response = await fetch('/api/multimodal/generate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        prompt: 'Készíts egy szép tájképet hegyek és tavak között',
                        modality: 'text2image',
                        parameters: { style: 'realistic', quality: 'high' }
                    })
                });
                const data = await response.json();
                displayResults('Multimodális AI Eredmény', data, true);
            } catch (error) {
                displayError('Multimodális AI hiba: ' + error.message);
            }
        }

        async function testWebScraping() {
            showLoading('Web scraping teszt...');
            try {
                const response = await fetch('/api/web/scrape', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        urls: ['https://example.com', 'https://httpbin.org/html'],
                        data_type: 'text',
                        max_pages: 2
                    })
                });
                const data = await response.json();
                displayResults('Web Scraping Eredmény', data, true);
            } catch (error) {
                displayError('Web scraping hiba: ' + error.message);
            }
        }

        async function testQuantumSimulation() {
            showLoading('Kvantum szimuláció futtatása...');
            try {
                const response = await fetch('/api/quantum/simulate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        circuit_description: 'Hadamard kapu + CNOT kapu + mérés',
                        num_qubits: 4
                    })
                });
                const data = await response.json();
                displayResults('Kvantum Szimuláció Eredmény', data, true);
            } catch (error) {
                displayError('Kvantum szimuláció hiba: ' + error.message);
            }
        }

        async function showUltimateStats() {
            showLoading('Ultimate statisztikák betöltése...');
            try {
                const response = await fetch('/api/system/ultimate_stats');
                const data = await response.json();
                displayResults('🚀 JADED AI Ultimate Statisztikák', data, true);
            } catch (error) {
                displayError('Statisztikák hiba: ' + error.message);
            }
        }
        function copyMessage(event, messageId) {
            const messageElement = getEl(messageId);
            const textToCopy = messageElement.innerText;

            navigator.clipboard.writeText(textToCopy).then(() => {
                event.target.innerHTML = '<i class="fas fa-check"></i> Másolva!';
                setTimeout(() => {
                    event.target.innerHTML = '<i class="fas fa-copy"></i> Másolás';
                }, 2000);
                HapticFeedback.success();
            }).catch(() => {
                HapticFeedback.error();
            });
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function downloadReport() {
            try {
                const { researchState } = AppState;
                if (!researchState || !researchState.documentContent) {
                    HapticFeedback.error();
                    alert('Nincs letölthető jelentés');
                    return;
                }

                // Tiszta szöveg készítése
                const content = researchState.documentContent;
                const fileName = `JADED_kutatasi_jelentes_${researchState.query.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().toISOString().slice(0, 10)}.txt`;

                // Fájl letöltése
                const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = fileName;
                a.style.display = 'none';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);

                HapticFeedback.success();

                // Visszajelzés a felhasználónak
                const downloadBtn = document.querySelector('[title="Letöltés"]');
                const originalIcon = downloadBtn.innerHTML;
                downloadBtn.innerHTML = '<i class="fas fa-check"></i>';
                setTimeout(() => {
                    downloadBtn.innerHTML = originalIcon;
                }, 2000);

            } catch (error) {
                console.error('Letöltési hiba:', error);
                HapticFeedback.error();
                alert('Hiba a letöltés során');
            }
        }

        function shareReport() {
            try {
                const { researchState } = AppState;
                if (!researchState || !researchState.documentContent) {
                    HapticFeedback.error();
                    alert('Nincs megosztható jelentés');
                    return;
                }

                const shareText = `JADED AI Kutatási Jelentés: ${researchState.query}\n\n${researchState.documentContent.slice(0, 500)}...\n\nGenerálva: JADED Deep Discovery AI Platform`;

                // Modern Web Share API ha elérhető (mobil eszközökön)
                if (navigator.share) {
                    navigator.share({
                        title: `JADED Kutatási Jelentés: ${researchState.query}`,
                        text: shareText,
                        url: window.location.href
                    }).then(() => {
                        HapticFeedback.success();
                    }).catch((error) => {
                        console.log('Megosztási hiba:', error);
                        fallbackShare(shareText);
                    });
                } else {
                    // Fallback: vágólapra másolás
                    fallbackShare(shareText);
                }

            } catch (error) {
                console.error('Megosztási hiba:', error);
                HapticFeedback.error();
                alert('Hiba a megosztás során');
            }
        }

        function fallbackShare(text) {
            // Vágólapra másolás
            navigator.clipboard.writeText(text).then(() => {
                HapticFeedback.success();
                alert('Jelentés vágólapra másolva!');

                // Vizuális visszajelzés
                const shareBtn = document.querySelector('[title="Megosztás"]');
                const originalIcon = shareBtn.innerHTML;
                shareBtn.innerHTML = '<i class="fas fa-check"></i>';
                setTimeout(() => {
                    shareBtn.innerHTML = originalIcon;
                }, 2000);

            }).catch(() => {
                HapticFeedback.error();
                // Régi módszer fallback
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                try {
                    document.execCommand('copy');
                    alert('Jelentés vágólapra másolva!');
                    HapticFeedback.success();
                } catch (err) {
                    alert('Nem sikerült a vágólapra másolás');
                    HapticFeedback.error();
                }
                document.body.removeChild(textArea);
            });
        }
            function showLoading(message) {
                // Create a loading message element
                const loadingMessage = document.createElement('div');
                loadingMessage.id = 'loadingMessage';
                loadingMessage.className = 'message ai-message';
                loadingMessage.innerHTML = `
                    <div class="ai-content">
                        <i class="fas fa-spinner fa-spin"></i> ${message}
                    </div>
                `;

                // Append the loading message to the messages container
                messagesContainer.appendChild(loadingMessage);
                scrollToBottom();
            }

            function displayResults(title, data, raw = false) {
                let content;
                if (raw) {
                    content = `<pre><code class="language-json">${JSON.stringify(data, null, 2)}</code></pre>`;
                } else {
                    content = data;
                }
                addAiMessage(`<h3>${title}</h3>${content}`);
                hljs.highlightAll();
            }

            function displayError(errorMessage) {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'message ai-message';
                errorDiv.innerHTML = `
                    <div class="ai-content error-message">
                        <i class="fas fa-exclamation-triangle"></i> ${errorMessage}
                    </div>
                `;
                messagesContainer.appendChild(errorDiv);
                scrollToBottom();
            }
    </script>
</body>
</html>